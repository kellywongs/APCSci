1. Before the actor has called its act method and officially existed in the world, all it's doing is floating in RAM waiting for something to do. It can be moved around and relocated (at least, in the GUI you can move around an actor that's been placed by the world). Does that make sense? It doesn’t really have an X or a Y yet; the actor on the screen before you click ‘act’ is a visual representation of something that only conceptually exists at the moment. The actor's X and Y doesn't exist until the actor actually starts acting. However, stepCounter can be initialized because it doesn't depend on a tangible X and Y. 

2. I wouldn't put all the code from critMove() into act(), mostly in the interest of building modular, clean code. It's not just acting, it's running critMove(); dividing the code up into logical sections that can be independently called by its children is just good practice. Probably related to why we use clearly-defined classes in CSS instead of always using selectors (e.g. .navigation, not selecting the p in the h1 in the ul in the div in the div in the div). Also I remember it being called a "massive pain in the butt", so there's that too.

3. Modulus returns the integer remainder of a division operation, so 7%2 would not return 3.5 but 1. Checking for x%y == 0 would check for whether y could go perfectly into x. The advantage of using a modulus is that you can use it to perform a periodic check without having to reset an eternally-incrementing number all the time. You can check for even or odd numbers by %2 and checking if it equals 0 or 1 respectively, something I'm sure is useful somehow.

4. getRandomNumber(x) grabs a random number from 0 to x. 